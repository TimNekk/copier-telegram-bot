# Settings

_subdirectory: template

_jinja_extensions:
    - copier_templates_extensions.TemplateExtensionLoader
    - extensions/context.py:ContextUpdater
    - extensions/slugify.py:SlugifyExtension
    - extensions/is_installed.py:IsInstalledExtension
    - extensions/is_valid.py:IsValidExtension

_tasks:
    - command: ["{{ _copier_python }}", "tasks/git_init.py"]
      when: "{{ git_init }}"
    - command:
          [
              "{{ _copier_python }}",
              "tasks/filter_requirements.py",
              "{{ linter }}",
              "{{ settings_manager }}",
              "{{ features|join(' ') }}",
          ]
    - command: ["{{ _copier_python }}", "tasks/uv_install.py"]
      when: "{{ package_manager == 'uv' }}"
    - command: ["{{ _copier_python }}", "tasks/poetry_install.py", "{{ python_version }}"]
      when: "{{ package_manager == 'poetry' }}"
    - command: ["{{ _copier_python }}", "tasks/pip_install.py", "{{ python_version }}"]
      when: "{{ package_manager == 'pip' }}"
    - command: ["{{ _copier_python }}", "tasks/cleanup.py"]

# Answers

project_name:
    type: str
    help: "Enter your project's name"
    placeholder: My Telegram Bot
    validator: "{% if project_name.strip() == '' %}Project name cannot be empty{% endif %}"

project_slug:
    type: str
    help: "Enter your project's slug"
    default: "{{ project_name|slugify }}"
    validator: "{% if not project_slug.strip()|is_valid_slug %}Invalid project's slug (must contain only lowercase letters, numbers, and hyphens; no spaces or special characters allowed; cannot start or end with a hyphen){% endif %}"

project_version:
    type: str
    help: "Enter your project's version"
    default: "0.1.0"
    validator: "{% if not project_version.strip()|is_valid_version %}Invalid project's version (see PEP 440 https://peps.python.org/pep-0440/){% endif %}"

project_description:
    type: str
    help: "Describe your project briefly (optional)"
    placeholder: Telegram bot that [main function] to help users [primary benefit]

project_author_name:
    type: str
    help: "Enter your full name (optional)"
    placeholder: "John Doe"

project_author_email:
    type: str
    help: "Enter your email address (optional)"
    placeholder: "user@example.com"
    when: "{{ project_author_name.strip() != '' }}"
    validator: "{% if project_author_email.strip() != '' and not project_author_email.strip()|is_valid_email %}Invalid email{% endif %}"

package_manager:
    type: str
    help: Which package manager do you want to use?
    choices:
        uv:
            value: uv
            validator: "{% if not 'uv'|is_installed %}not installed{% endif %}"
        Poetry:
            value: poetry
            validator: "{% if not 'poetry'|is_installed %}not installed{% endif %}"
        pip:
            value: pip
            validator: "{% if not 'pip'|is_installed %}not installed{% endif %}"

python_version:
    type: str
    help: What version of Python do you want to use?
    choices:
        "3.13":
            value: "3.13"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.13'|is_installed %}not installed{% endif %}"
        "3.12":
            value: "3.12"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.12'|is_installed %}not installed{% endif %}"
        "3.11":
            value: "3.11"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.11'|is_installed %}not installed{% endif %}"
        "3.10":
            value: "3.10"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.10'|is_installed %}not installed{% endif %}"
        "3.9":
            value: "3.9"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.9'|is_installed %}not installed{% endif %}"

linter:
    type: str
    help: Which linter do you want to use?
    choices:
        "ruff":
            value: "ruff"
        "None":
            value: ""

settings_manager:
    type: str
    help: Which settings manager do you want to use?
    choices:
        "Pydantic Settings":
            value: "pydantic-settings"
        "Dynaconf":
            value: "dynaconf"

middlewares:
    type: str
    help: Which middlewares do you want to use?
    multiselect: true
    choices:
        "Dependency      | Inject required dependencies into handler's data":
            value: "dependency"
        "Logging         | Detailed logging of all telegram bot events and updates":
            value: "logging"
        "Throttling      | Rate limit handling to prevent spam and abuse":
            value: "throttling"
        "Callback Answer | Automatically answer callback queries":
            value: "callback_answer"
    validator: "{% if 'throttling' in middlewares and 'dependency' not in middlewares %}Dependency Middleware is required to use Throttling Middleware{% endif %}"

features:
    type: str
    help: What features do you want to use?
    multiselect: true
    choices:
        "just | Handy way to save and run project-specific commands":
            value: "just"

git_init:
    type: bool
    help: Do you want to initialize git?
    default: true
    when: "{{ 'git'|is_installed }}"
