# Settings

_subdirectory: template

_jinja_extensions:
    - copier_templates_extensions.TemplateExtensionLoader
    - extensions/context.py:ContextUpdater
    - extensions/slugify.py:SlugifyExtension
    - extensions/is_installed.py:IsInstalledExtension
    - extensions/is_valid.py:IsValidExtension

_tasks:
    - command: ["{{ _copier_python }}", "tasks/git_init.py"]
      when: "{{ git_init }}"
    - command: ["{{ _copier_python }}", "tasks/create_templates.py"]
    - command:
          [
              "{{ _copier_python }}",
              "tasks/filter_requirements.py",
              "{{ linter }}",
              "{{ settings_manager }}",
              "{{ features|join(' ') }}",
              "{% if database == 'postgres' %}psycopg[binary]{% endif %}",
              "{% if database == 'postgres' %}sqlalchemy{% endif %}",
              "{% if 'cache-decorator' in features %}orjson{% endif %}",
              "{% if 'i18n' in features %}aiogram-i18n[compiler]{% endif %}",
          ]
    - command: ["{{ _copier_python }}", "tasks/uv_install.py"]
      when: "{{ package_manager == 'uv' }}"
    - command: ["{{ _copier_python }}", "tasks/poetry_install.py", "{{ python_version }}"]
      when: "{{ package_manager == 'poetry' }}"
    - command: ["{{ _copier_python }}", "tasks/pip_install.py", "{{ python_version }}"]
      when: "{{ package_manager == 'pip' }}"
    - command: ["{{ _copier_python }}", "tasks/cleanup.py"]

_message_before_copy: |
    ‎
    ▄▖    ▘      ▄▖  ▜              ▄   ▗   ▄▖       ▜   ▗   
    ▌ ▛▌▛▌▌█▌▛▘  ▐ █▌▐ █▌▛▌▛▘▀▌▛▛▌  ▙▘▛▌▜▘  ▐ █▌▛▛▌▛▌▐ ▀▌▜▘█▌
    ▙▖▙▌▙▌▌▙▖▌   ▐ ▙▖▐▖▙▖▙▌▌ █▌▌▌▌  ▙▘▙▌▐▖  ▐ ▙▖▌▌▌▙▌▐▖█▌▐▖▙▖
        ▌                ▄▌                        ▌             

    Thanks for using Copier Telegram Bot template by TimNekk!

    You'll be asked a series of questions whose answers will be used to
    generate a tailored project for you.

_message_after_copy: |
    
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⠿⠿⠿⠿⠶⠶⢤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⢀⠌⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠳⣄⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⡰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠍⡀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡟⡀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⡅⠀⠀⠀⠀⣴⣶⡆⠀⠀⠀⠀⣶⣶⡄⠀⠀⠀⠀⠓⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⠙⠛⠁⠰⢦⠴⠀⠙⠛⠁⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢠⠁⠀⠀⠀⠀⠀
    ⠀⠀⠀⡠⢔⢜⠱⣤⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠤⠄⠓⠃⠐⠠⢀⠀⠀⠀
    ⢀⠔⠁⠈⢀⠎⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢆⠀⠀⠑⢄⠀
    ⡇⠤⠒⡨⠁⠀⠀⠀⠀⢁⣴⠄⠀⠀⠀⠀⠀⠈⢖⠄⠀⠀⠀⠀⠀⢃⠢⢄⡀⡅
    ⠘⠒⠒⣇⠀⠀⠀⠀⡠⣺⣿⠀⠀⠀⠀⠀⠀⠀⣸⣎⠄⡀⠀⠀⠀⠀⡗⣒⡺⠂
    ⠀⠀⠀⠀⠛⠂⠙⠓⠛⠉⢏⣢⡄⠀⠀⠀⢀⣰⠛⠛⠳⠮⠥⠶⣒⠎⠁⠀⠀⠀
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

    Your project "{{ project_name }}" has been created successfully!

    Next steps:

    1. Change directory to the project root:

       $ cd {{ _copier_conf.dst_path }}

    2. Fill in .env file

    3. Run the bot:

       $ {% if 'just' in features %}just up{% else %}docker compose up{% endif %}

# Answers

project_name:
    type: str
    help: "Enter your project's name"
    placeholder: My Telegram Bot
    validator: "{% if project_name.strip() == '' %}Project name cannot be empty{% endif %}"

project_slug:
    type: str
    help: "Enter your project's slug"
    default: "{{ project_name|slugify }}"
    validator: "{% if not project_slug.strip()|is_valid_slug %}Invalid project's slug (must contain only lowercase letters, numbers, and hyphens; no spaces or special characters allowed; cannot start or end with a hyphen){% endif %}"

project_version:
    type: str
    help: "Enter your project's version"
    default: "0.1.0"
    validator: "{% if not project_version.strip()|is_valid_version %}Invalid project's version (see PEP 440 https://peps.python.org/pep-0440/){% endif %}"

project_description:
    type: str
    help: "Describe your project briefly (optional)"
    placeholder: Telegram bot that [main function] to help users [primary benefit]

project_author_name:
    type: str
    help: "Enter your full name (optional)"
    placeholder: "John Doe"

project_author_email:
    type: str
    help: "Enter your email address (optional)"
    placeholder: "user@example.com"
    when: "{{ project_author_name.strip() != '' }}"
    validator: "{% if project_author_email.strip() != '' and not project_author_email.strip()|is_valid_email %}Invalid email{% endif %}"

package_manager:
    type: str
    help: Which package manager do you want to use?
    choices:
        "uv                | Blazing-fast Python package installer and resolver":
            value: uv
            validator: "{% if not 'uv'|is_installed %}not installed{% endif %}"
        "Poetry            | Python dependency management and packaging made easy":
            value: poetry
            validator: "{% if not 'poetry'|is_installed %}not installed{% endif %}"
        "pip               | Standard package installer for Python packages":
            value: pip
            validator: "{% if not 'pip'|is_installed %}not installed{% endif %}"

python_version:
    type: str
    help: What version of Python do you want to use?
    choices:
        "3.13":
            value: "3.13"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.13'|is_installed %}not installed{% endif %}"
        "3.12":
            value: "3.12"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.12'|is_installed %}not installed{% endif %}"
        "3.11":
            value: "3.11"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.11'|is_installed %}not installed{% endif %}"
        "3.10":
            value: "3.10"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.10'|is_installed %}not installed{% endif %}"
        "3.9":
            value: "3.9"
            validator: "{% if package_manager in ['poetry', 'pip'] and not '3.9'|is_installed %}not installed{% endif %}"

database:
    type: str
    help: Which database do you want to use?
    choices:
        "Postgres          | Powerful open-source relational database with ACID compliance and advanced features":
            value: "postgres"
        "None              | Do not configure a database for this project":
            value: ""

models:
    type: str
    help: Which pre-defined models do you want to add?
    multiselect: true
    choices:
        "User              | id, username, first_name, second_name":
            value: "user"
    when: "{{ database }}"

deep_link:
    type: bool
    help: Do you want to store user's deep link?
    default: true
    when: "{{ 'user' in models }}"

has_blocked_bot:
    type: bool
    help: Do you want to store whether user has blocked bot?
    default: true
    when: "{{ 'user' in models }}"

features:
    type: str
    help: What features do you want to use?
    multiselect: true
    choices:
        "Redis             | Persistent key-value storage for maintaining bot state across restarts":
            value: "redis"
        "just              | Handy way to save and run project-specific commands":
            value: "just"
        "Alembic           | Database migration tool for SQLAlchemy to manage schema changes":
            value: "alembic"
            validator: "{% if not database %}No database selected{% endif %}"
        "Aiogram Dialog    | Framework for developing interactive messages and menus":
            value: "aiogram-dialog"
        "Cache Decorator   | Cache results of frequent functions using Redis":
            value: "cache-decorator"
        "i18n              | Support multiple languages":
            value: "i18n"
    validator: "{% if 'aiogram-dialog' in features and 'redis' not in features %}Redis is required to use Aiogram Dialog{% endif %}{% if 'cache-decorator' in features and 'redis' not in features %}Redis is required to use Cache Decorator{% endif %}"

middlewares:
    type: str
    help: Which middlewares do you want to use?
    multiselect: true
    choices:
        "Dependency        | Inject required dependencies into handler's data":
            value: "dependency"
        "Logging           | Detailed logging of all telegram bot events and updates":
            value: "logging"
        "Throttling        | Rate limit handling to prevent spam and abuse":
            value: "throttling"
        "Database          | Database session management with transactional safety":
            value: "database"
            validator: "{% if not database %}No database selected{% endif %}"
        "Callback Answer   | Automatically answer callback queries":
            value: "callback_answer"
        "User Register     | Add user to database on /start":
            value: "user_register"
            validator: "{% if not database %}No database selected{% elif 'user' not in models %}User model not selected{% endif %}"
    validator: "{% if 'throttling' in middlewares and 'dependency' not in middlewares %}Dependency middleware is required to use Throttling middleware{% elif 'user_register' in middlewares and 'database' not in middlewares %}Database middleware is required to use User Register middleware{% endif %}"

linter:
    type: str
    help: Which linter do you want to use?
    choices:
        "ruff              | Blazing-fast Rust-based linter replacing Flake8, isort, and autoformatters":
            value: "ruff"
        "None              | Skip linter configuration for this project":
            value: ""

settings_manager:
    type: str
    help: Which settings manager do you want to use?
    choices:
        "Pydantic Settings | Modern type-safe configuration using Python type annotations":
            value: "pydantic-settings"
        "Dynaconf          | Multi-source configuration manager with environment-aware settings":
            value: "dynaconf"

dependency_bot:
    type: str
    help: Which dependency bot do you want to use?
    choices:
        "Dependabot        | GitHub's dependency bot":
            value: "dependabot"
        "None              | Skip dependency bot configuration":
            value: ""

dependency_bot_interval:
    type: str
    help: How often do you want to update dependencies?
    choices:
        "Daily             | Update dependencies every day":
            value: "daily"
        "Weekly            | Update dependencies every week":
            value: "weekly"
        "Monthly           | Update dependencies every month":
            value: "monthly"
    when: "{{ dependency_bot }}"

dependency_bot_prefix:
    type: str
    help: What commit message and PR title prefix do you want to use for dependency-update bot? (optional)
    default: "⬆️"
    when: "{{ dependency_bot }}"

git_init:
    type: bool
    help: Do you want to initialize git?
    default: true
    when: "{{ 'git'|is_installed }}"
