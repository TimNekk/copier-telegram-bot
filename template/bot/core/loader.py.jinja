from __future__ import annotations

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
{%- if 'redis' in features %}
from aiogram.fsm.storage.base import DefaultKeyBuilder
from aiogram.fsm.storage.redis import RedisStorage
{%- endif %}
{%- if 'redis' in features %}
from redis.asyncio import ConnectionPool, Redis
{%- endif %}

from bot.core.settings import {% if settings_manager == 'pydantic-settings' %}Settings{% elif settings_manager == 'dynaconf' %}settings{% endif %}
{%- if database == 'postgres' %}
from bot.database.database import get_sessionmaker
{%- endif %}
{% if settings_manager == 'pydantic-settings' %}
settings = Settings()
{% endif %}
bot = Bot(
    token=settings.bot.token{% if settings_manager == 'pydantic-settings' %}.get_secret_value(){% endif %},
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML,
        link_preview_is_disabled=True,
    ),
)
{% if 'redis' in features %}
redis_client = Redis(
    connection_pool=ConnectionPool(
        host="redis",
        port=settings.redis.port,
        db=0,
    ),
)

storage = RedisStorage(
    redis=redis_client,
    key_builder=DefaultKeyBuilder(
        with_destiny=True,
    ),
)
{%- endif %}
{% if 'redis' in features %}
dp = Dispatcher(
    storage=storage,
)
{%- else %}
dp = Dispatcher()
{%- endif %}
{% if database == 'postgres' %}
sessionmaker = get_sessionmaker(url={% if settings_manager == 'pydantic-settings' %}settings.postgres.url.get_secret_value(){% elif settings_manager == 'dynaconf' %}f"postgresql+psycopg://{settings.postgres.user}:{settings.postgres.password}@{settings.postgres.host}:{settings.postgres.port}/{settings.postgres.name}"{% endif %})
{% endif %}