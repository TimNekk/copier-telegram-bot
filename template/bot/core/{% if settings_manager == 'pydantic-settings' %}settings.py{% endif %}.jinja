from __future__ import annotations

from pydantic import DirectoryPath, {% if 'throttling' in middlewares %}NonNegativeFloat, {% endif %}{% if 'redis' in features or database == 'postgres' %}PositiveInt, {% endif %}SecretStr{% if database == 'postgres' %}, computed_field{% endif %}
from pydantic_settings import BaseSettings as PydanticBaseSettings
from pydantic_settings import SettingsConfigDict


class BaseSettings(PydanticBaseSettings):
    model_config = SettingsConfigDict(extra="allow")


class BotSettings(BaseSettings):
    token: SecretStr
{%- if 'i18n' in features %}
    default_locale: str
{%- endif %}
{%- if 'throttling' in middlewares %}
    rate_limit: NonNegativeFloat
{%- endif %}{{ '\n\n' }}
class FileLogSettings(BaseSettings):
    name: str
    directory: DirectoryPath
    level: str
{{ '\n\n' }}{% if database == 'postgres' -%}
class PostgresSettings(BaseSettings):
    host: str
    port: PositiveInt
    name: str
    user: str
    password: SecretStr

    @computed_field
    @property
    def url(self) -> SecretStr:
        return SecretStr(
            f"postgresql+psycopg://{self.user}:{self.password.get_secret_value()}@{self.host}:{self.port}/{self.name}",
        )
{{ '\n\n' }}{% endif %}{% if 'redis' in features -%}
class RedisSettings(BaseSettings):
    port: PositiveInt
{{ '\n\n' }}{% endif -%}
class Settings(BaseSettings):
    bot: BotSettings
    file_log: FileLogSettings
{%- if database == 'postgres' %}
    postgres: PostgresSettings
{%- endif %}
{%- if 'redis' in features %}
    redis: RedisSettings
{%- endif %}

    model_config = SettingsConfigDict(env_nested_delimiter="__")
